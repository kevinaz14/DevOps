- hosts: databaseserver
  vars:
  # installation files source 
    mssql_installation_source: https://go.microsoft.com/fwlink/?linkid=853016

# Path to download installation media to
    mssql_installation_path: C:\SQLInstall

# Temporary path to store downloader
    mssql_temp_download_path: C:\tmp

# instance details
    mssql_instance_name: wma
    mssql_drive: C
    mssql_userdbvol_name: WMA_Admin
    mssql_port: 1433

### Memory Configuration ###
# memory in MB
# values must be divisible by 512

# Max memory to allocate to this instance
    mssql_max_server_memory: 1024

# Memory to reserve to the OS
    mssql_os_memory_reservation: 512

# Total system memory 
    mssql_total_system_memory: "{{ mssql_max_server_memory + mssql_os_memory_reservation }}"

# Suppress reboots that may occur during SQL Setup tasks
# you will want to set this to True if working on a sensitive system:
    mssql_suppress_reboot: False

### Service Accounts ###

    mssql_base_ldap_path: "cn=Users,dc=CONTOSO,dc=com"
    domain_controller: WMADC01

# SQL Service Account
# regex statements used in some steps expect the format of CONTOSO\
# do not use @CONTOSO.com for these accounts as SQL install will fail
    mssql_sqlsvc_account: WMA\sql_svc
    mssql_sqlsvc_account_pass: P@ssword2018

# SQL Agent Service Account
    mssql_agentsvc_account: WMA\sql_agt
    mssql_agentsvc_account_pass: P@ssword2018

# SQL Analysis Services Account
    mssql_assvc_account: "{{ mssql_sqlsvc_account }}"
    mssql_assvc_account_pass: "{{ mssql_sqlsvc_account_pass }}"

### File and Folder Paths ###

# volume paths
    mssql_userdbvol_path: "{{ mssql_drive }}:\\{{ mssql_userdbvol_name }}"
    mssql_db_accesspath: "{{ mssql_userdbvol_path }}\\DatabaseFiles"
    mssql_logs_accesspath: "{{ mssql_userdbvol_path }}\\DatabaseLogs"

# shared files paths
    mssql_installshared_path: C:\Program Files\Microsoft SQL Server
    mssql_installsharedwow_path: C:\Program Files (x86)\Microsoft SQL Server

# instance path
    mssql_instance_path: "C:\\Program Files\\Microsoft SQL Server\\{{ mssql_instance_name }}"

# SQL DB and Logging Paths
    mssql_sqlinstalldata_path: "{{ mssql_db_accesspath }}\\{{mssql_instance_name }}"
    mssql_sqluserdata_path: "{{ mssql_db_accesspath }}\\{{mssql_instance_name }}"
    mssql_sqluserlog_path: "{{ mssql_logs_accesspath }}\\{{mssql_instance_name }}"
    mssql_sqltempDB_path: "C:\\TempDBFiles\\Data\\{{mssql_instance_name }}"
    mssql_sqltempDBlog_path: "C:\\TempDBFiles\\Log\\{{mssql_instance_name }}"

# security mode - SQL indicates mixed-mode auth, while Windows indicates Windows Auth.
    mssql_security_mode: sql

# SA user password, if security mode is set to 'SQL'
# by default for testing we'll be lazy and use the service account password,
# but on live systems you should use something else:
    mssql_sa_password: "{{ mssql_sqlsvc_account_pass }}"

# features - Comma seperated list of features to be installed
#
# example:   
# mssql_features: SQLENGINE,AS
# 
# The list of features below is untested, some may not work with DSC
#
# Features list: 
#
# Database engine = SQLENGINE
# Replication = REPLICATION
# Full-text and semantic extractions for search = FULLTEXT
# Data quality services = DQ
# Analysis services = AS
# Reporting services – native = RS
# Reporting services – sharepoint = RS_SHP
# Reporting services add-in for sharepoint products = RS_SHPWFE
# Data quality client = DQC
# SQL Server data tools = BIDS
# Client tools connectivity = CONN
# Integration services = IS
# Client tools backwards compatibility = BC
# Client tools SDK = SDK
# Documentation components = BOL
# Management tools – basic = SSMS
# Management tools – advanced = ADV_SSMS
# Distributed replay controller = DREPLAY_CTLR
# Distributed replay client = DREPLAY_CLT
# SQL client connectivity SDK = SNAC_SDK
# Master data services = MDS
# ADVANCEDANALYTICS 	Installs R Services, requires the database engine. Unattended installations require /IACCEPTROPENLICENSETERMS parameter.   

    mssql_features: SQLENGINE,FULLTEXT,CONN

# Collation
    mssql_collation: SQL_Latin1_General_CP1_CI_AS

# Browser service startup mode
# Specifies the startup mode for SQL Server Browser service. { Automatic | Disabled | 'Manual' }
    mssql_browsersvc_mode: Automatic

# Default Account Access
# Ansible_Admin must be included so that the playbook can make configuration changes post install
    mssql_sysadmin_accounts: 
      - WMA\Domain Admins
      - WMA\Administrator

# Analysis Services Admins (if installed)
    mssql_asadmin_accounts: "{{ mssql_sysadmin_accounts }}"

# Tuning options

# When an instance of SQL Server runs on a computer that has more than one microprocessor or CPU, 
# it detects the best degree of parallelism, that is, the number of processors employed to run a single statement, 
# for each parallel plan execution. You can use the max degree of parallelism option to limit the number of processors 
# to use in parallel plan execution. 
#
# If the affinity mask option is not set to the default, it may restrict the number of processors available to 
# SQL Server on symmetric multiprocessing (SMP) systems. 
#
# To enable the server to determine the maximum degree of parallelism, set this option to 0, the default value. 
#
# See: https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option
    mssql_max_degree_of_parallelism: 0

# Minimum memory to allocate to SQL
#
# Should remain 0 in most cases.
#
# see: Optimizing Server Performance Using Memory Configuration Options
# https://technet.microsoft.com/en-us/library/ms177455(v=sql.105).aspx
#
# The min server memory server configuration option can be used to ensure that 
# SQL Server does not release memory below the configured minimum server memory 
# once that threshold is reached. This configuration option can be set to a specific value 
# based on the size and activity of your SQL Server. If you choose to set this value, 
# set it to some reasonable value to ensure that the operating system does not request too 
# much memory from SQL Server, which can affect SQL Server performance.
    mssql_min_server_memory: 0
  
  tasks:
  - name: Powershell | Check for SQLServer DSC Powershell module
    win_psmodule:
      name: SQLServerDsc
      state: present

  - name: Powershell | Check for Storage DSC Powershell module
    win_psmodule:
      name: StorageDsc
      state: present

  - name: Powershell | Check for ServerManager Powershell module
    win_psmodule:
      name: ServerManager
      state: present

  - name: Powershell | Ensure that DBA Tools module is present
    win_psmodule:
      name: dbatools
      state: present

  - name: Powershell | Check for xNetworking Powershell module
    win_psmodule:
      name: xNetworking
      state: present

  - name: Windows | Install .NET Framework Core
    win_feature:
      name: NET-Framework-Core
      state: present

# Setup SQL Server Pre-Reqs
  - name: Windows | Install .NET Framework 3.5
    win_feature:
      name: NET-Framework-Features
      state: present

  - name: Windows | Install .NET Framework 4.5 Features
    win_feature:
      name: NET-Framework-45-Features
      state: present
      include_sub_features: True

  - name: Windows | Install Windows Process Activation Service
    win_feature:
      name: WAS
      state: present
      include_sub_features: True
      
  # Setup service accounts
#
# We delegate this process to our domain controller since the required AD services are there for
# win_domain_user to interact with. 
  - name: Active Directory | Ensure SQL Service account is present
    win_domain_user:
      name: "{{ mssql_sqlsvc_account | regex_search('[^\\\\]*$') }}"
      firstname: "{{ mssql_instance_name }}"
      surname: SQLSvc
      password: "{{ mssql_sqlsvc_account_pass }}"
      password_never_expires: yes
      user_cannot_change_password: yes
      description: "SQL Service account for {{ inventory_hostname }}\\{{ mssql_instance_name }}"
      state: present
      path: "{{ mssql_base_ldap_path }}"
      groups:
        - Domain Users
    tags: service_account
    delegate_to: "{{ domain_controller }}"

  - name: Active Directory | Ensure SQL Agent Service account is present
    win_domain_user:
      name: "{{ mssql_agentsvc_account | regex_search('[^\\\\]*$') }}"
      firstname: "{{ mssql_instance_name }}"
      surname: AgentSvc
      password: "{{ mssql_agentsvc_account_pass }}"
      password_never_expires: yes
      user_cannot_change_password: yes
      description: "SQL Agent service account for {{ inventory_hostname }}\\{{ mssql_instance_name }}"
      state: present
      path: "{{ mssql_base_ldap_path }}"
      groups:
        - Domain Users
    delegate_to: "{{ domain_controller }}"
    tags: service_account

# SQL install may fail if a pending reboot is detected
# Assuming we are allowed to reboot this step will check for pending reboots
# and execute a reboot, reboot activity can be controlled using the variable mssql_suppress_reboot

  - name: Ensure that a reboot is not pending
    when: ansible_reboot_pending
    debug:
      msg: 'Pending reboot detected'
    changed_when: true
    notify: reboot windows

  - meta: flush_handlers

  - name: Fetch SQL Media Downloader
    win_get_url:
      url: "{{ mssql_installation_source }}"
      dest: "{{ mssql_temp_download_path }}\\SQLServer2017-SSEI-Dev.exe"

  - name: Use Media Downloader to fetch SQL Installation CABs to {{ mssql_installation_path }}
    win_shell: "{{ mssql_temp_download_path }}\\SQLServer2017-SSEI-Dev.exe /Action=Download /MediaPath={{ mssql_installation_path }} /MediaType=CAB /Quiet"

# Job will fail if extracted media folder is not empty, quick step to ensure it's empty
  - name: Ensure installation media extraction path is empty
    win_file:
      path: "{{ mssql_installation_path }}\\Media"
      state: absent

  - name: Extract installation media
    win_shell: "{{ mssql_installation_path }}\\SQLServer2017-DEV-x64-ENU.exe /X:{{ mssql_installation_path }}\\Media /Q"
# If this step fails, logs are in C:\Program Files\Microsoft SQL Server\...\Setup Bootstrap\Log
# it will often contain the actual error.  If it shows everything passing, the issue is within the DSC logs.
# 
# This module also typically throws this error fpr all failure conditions:
# PowerShell DSC resource MSFT_SqlSetup  failed to execute Set-TargetResource functionality with error message: 
# System.Exception: Test-TargetResource returned false after calling Set-TargetResource.
#
#
# This document can also be useful to troubleshoot issues with DSC modules
# https://docs.microsoft.com/en-us/powershell/dsc/troubleshooting 
#
# In particular completing these steps:
# https://docs.microsoft.com/en-us/powershell/dsc/troubleshooting#gathering-events-from-a-single-dsc-operation
# then re-running a failing PowershellDSC job can help you find the source of your error
  - name: Install SQL Server
    win_dsc:
      resource_name: SQLSetup
      Action: Install
      UpdateEnabled: True
      SourcePath: "{{ mssql_installation_path }}\\Media"
      InstanceName: "{{ mssql_instance_name }}"
      InstallSharedDir: "{{ mssql_installshared_path }}"
      InstallSharedwowDir: "{{ mssql_installsharedwow_path }}"
      InstanceDir: "{{ mssql_instance_path }}"
      InstallSQLDataDir: "{{ mssql_sqlinstalldata_path }}"
      SQLUserDBDir: "{{ mssql_sqluserdata_path }}"
      SQLUserDBLogDir: "{{ mssql_sqluserlog_path }}"
      SQLTempDBDir: "{{ mssql_sqltempDB_path }}"
      SQLTempDBLogDir: "{{ mssql_sqltempDBlog_path }}"
      Features: "{{ mssql_features }}"
      SQLCollation: "{{ mssql_collation }}"
      BrowserSvcStartupType: "{{ mssql_browsersvc_mode }}"
      SuppressReboot: "{{ mssql_suppress_reboot }}"
    # Service Accounts
    #
    # If the type of the DSC resource option is a PSCredential then 
    # there needs to be 2 options set in the Ansible task definition 
    # suffixed with _username and _password. So we will be providing 
    # two options for these normally single option items.

    # SQL Service Account
      SQLSvcAccount_username: "{{ mssql_sqlsvc_account }}"
      SQLSvcAccount_password: "{{ mssql_sqlsvc_account_pass }}"
    # SQL Agent Service Account
      AgtSvcAccount_username: "{{ mssql_agentsvc_account }}"
      AgtSvcAccount_password: "{{ mssql_agentsvc_account_pass }}"
    # SQL Analysis Services Account
      ASSvcAccount_username: "{{ mssql_assvc_account }}"
      ASSvcAccount_password: "{{ mssql_assvc_account_pass }}"

    # Used when installing on a network path, comment out 
    # SourceCredential_username: "{{ ansible_user }}"
    # SourceCredential_password: "{{ ansible_password }}"

    # System Admins 
      SQLSysAdminAccounts: "{{ mssql_sysadmin_accounts }}"
    # Analysis Services Admins (if installed)
      ASSysAdminAccounts: "{{ mssql_asadmin_accounts }}"
    tags: install_sql

# End of win_dsc for SQL Server

# Firewall configuration
  - name: Firewall | Allow Database Engine for instance
    win_dsc:
      resource_name: xFirewall
      Name: "SQL Server Database Engine instance {{ mssql_instance_name }}"
      Program: sqlservr.exe 
      Ensure: present
      Enabled: True
      Profile: "Domain"
      Direction: "Inbound"
      Action: Allow
      Description: "Allows the Database Engine to access the network"  
    tags: configure_firewall

  - name: Firewall | Allow SQLBrowser for instance
    win_dsc:
      resource_name: xFirewall
      Name: "SQL Server Browser instance {{ mssql_instance_name }}"
      Service: SQLBrowser
      Ensure: present
      Enabled: True
      Profile: "Domain"
      Direction: "Inbound"
      Action: Allow
      Description: "Allows the SQL Server Browser to access the network"  
    tags: configure_firewall

# Begin SQL Server configuration
  - name: Enable TCP Connectivity
    win_dsc:
      resource_name: SqlServerNetwork
      InstanceName: "{{ mssql_instance_name }}"
      ProtocolName: tcp
      TcpPort: "{{ mssql_port }}"
      IsEnabled: True
      RestartService: True
    tags: configure_sql

  - name: Adjust Max Server Memory to {{ mssql_max_server_memory }}
    when: mssql_max_server_memory is defined
    win_dsc:
      resource_name: SqlServerConfiguration 
      InstanceName: "{{ mssql_instance_name }}"
      ServerName: "{{ ansible_hostname }}"
      OptionName: max server memory (MB)
      OptionValue: "{{ mssql_max_server_memory }}"
      RestartService: False
    tags: configure_sql

  - name: Adjust Min Server Memory to {{ mssql_min_server_memory }}
    when: mssql_min_server_memory is defined
    win_dsc:
      resource_name: SqlServerConfiguration 
      ServerName: "{{ ansible_hostname }}"
      InstanceName: "{{ mssql_instance_name }}"
      OptionName: min server memory (MB)
      OptionValue: "{{ mssql_min_server_memory }}"
    tags: configure_sql

  - name: Adjust Max Degree of Parallelism
    when: mssql_max_degree_of_parallelism is defined
    win_dsc:
      resource_name: SqlServerConfiguration 
      ServerName: "{{ ansible_hostname }}"
      InstanceName: "{{ mssql_instance_name }}"
      OptionName: max degree of parallelism
      OptionValue: "{{ mssql_max_degree_of_parallelism }}"
  tags: configure_sql

